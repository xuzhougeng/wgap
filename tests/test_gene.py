import unittest

from typing import List
from wgap.scripts.gene import Orf, Gene, Transcript,Exon

from wgap.scripts.seq_utils import read_fasta

from wgap.scripts.model_loader import gff3_loader




cds = "ATGGAGCCGCCACAGCATCAGCATCATCATCATCAAGCCGACCAAGAAAGCGGCAACAACAACAACAACAAGTCCGGCTCTGGTGGTTACACGTGTCGCCAGACCAGCACGAGGTGGAC\
ACCGACGACGGAGCAAATCAAAATCCTCAAAGAACTTTACTACAACAATGCAATCCGGTCACCAACAGCCGATCAGATCCAGAAGATCACTGCAAGGCTGAGACAGTTCGGAAAGATTGAGGG\
CAAGAACGTCTTTTACTGGTTCCAGAACCATAAGGCTCGTGAGCGTCAGAAGAAGAGATTCAACGGAACAAACATGACCACACCATCTTCATCACCCAACTCGGTTATGATGGCGGCTAA\
CGATCATTATCATCCTCTACTTCACCATCATCACGGTGTTCCCATGCAGAGACCTGCTAATTCCGTCAACGTTAAACTTAACCAAGACCATCATCTCTATCATCATAACAAGCCATA\
TCCCAGCTTCAATAACGGGAATTTAAATCATGCAAGCTCAGGTACTGAATGTGGTGTTGTTAATGCTTCTAATGGCTACATGAGTAGCCATGTCTATGGATCTATGGAACAAGA\
CTGTTCTATGAATTACAACAACGTAGGTGGAGGATGGGCAAACATGGATCATCATTACTCATCTGCACCTTACAACTTCTTCGATAGAGCAAAGCCTCTGTTTGGTCTAGA\
AGGTCATCAAGAAGAAGAAGAATGTGGTGGCGATGCTTATCTGGAACATCGACGTACGCTTCCTCTCTTCCCTATGCACGGTGAAGATCACATCAACGGTGGTAGTGGT\
GCCATCTGGAAGTATGGCCAATCGGAAGTTCGCCCTTGCGCTTCTCTTGAGCTACGTCTGAACTAG"

c1 = "CTAGTTCAGACGTAGCTCAAGAGAAGCGCAAGGGCGAACTTCCGATTGGCCATACTTCCAGATGGCACCACTACCACCGTTGATGTGATCTTCACCGTGCATAGGGAAGAGAGGAAGCGTACGTCGATGTTCCAGATAAGCATCGCCACCACATTCTTCTTCTTCTTGATGACCTTCTAGACCAAACAGAGGCTTTGCTCTATCGAAGAAGTTGTAAGGTGCAGATGAGTAATGATGATCCATGTTTGCCCATCCTCCACCTACGTTGTTGTAATTCATAGAACAGTCTTGTTC"
c2 = "CATAGATCCATAGACATGGCTACTCATGTAGCCATTAGAAGCATTAACAACACCACATTCAGTACCTGAGCTTGCATGATTTAAATTCC"
c3 = "CGTTATTGAAGCTGGGATATGGCTTGTTATGATGATAGAGATGATGGTCTTGGTTAAGTTTAACGTTGACGGAATTAGCAGGTCTCTGCATGGGAACACCGTGATGATGGTGAAGTAGAGGATGATAATGATCGTTAGCCGCCATCATAACCGAGTTGGGTGATGAAGATGGTGTGGTCATGTTTGTTCCGTTGAATCTCTTCTTCTGACGCTCACGAGCCTTATGGTTCTGGAACCAGTAAAAGACGTTCTTGCCCTCAATCTTTCCGAACTGTCTCAGCCTTGCAGTGATCTTCTGGATCTGATCGGCTGTTGGTGACCGGATTGCATTGTTGTAGTAAAGTTCTTTGAGGATTTTGATTTGCTCCGTCGTCGGTGTCCACCTCGTGCTGGTCTGGCGACACGTGTAACCACCAGAGCCGGACTTGTTGTTGTTGTTGTTGCCGCTTTCTTGGTCGGCTTGATGATGATGATGCTGATGCTGTGGCGGCTCCAT"



class GeneAnnotationAdapterTest(unittest.TestCase):

    def test_orf_finder(self):
        orf = Orf.find_orf(cds)
        self.assertEqual(orf.sequence, cds)

    def test_transcripts(self):
        # C9	StringTie	transcript	67826358	67827698	1000	+	.	gene_id "STRG.39098"; transcript_id "STRG.39098.2"; cov "3.557759"; FPKM "0.277832"; TPM "0.404744";        chrom = 'C9'
        # C9	StringTie	exon	67826358	67826430	1000	+	.	gene_id "STRG.39098"; transcript_id "STRG.39098.2"; exon_number "1"; cov "4.041812";
        # C9	StringTie	exon	67826749	67826793	1000	+	.	gene_id "STRG.39098"; transcript_id "STRG.39098.2"; exon_number "2"; cov "6.075372";
        # C9	StringTie	exon	67826890	67827698	1000	+	.	gene_id "STRG.39098"; transcript_id "STRG.39098.2"; exon_number "3"; cov "3.374040";        
        chrom = 'C9'
        start = 67826357
        end = 67827698
        strand = '+'
        exon_list:List[Exon] = [
            Exon("exon_1", chrom, 67826357, 67826430, strand,
                 "GTTCTGTTTTCTAATTCGATTCTCTGTTTCCGGAGGCAGAAGCGATTTCTACTCTCTCTCACAGATCTACAAG"),
            Exon("exon_2", chrom, 67826748, 67826793, strand,
                 "CTCAAGATGGATACTACTAAGGATGATGATTTCACTTTCTCAAAG"),
            Exon("exon_3", chrom, 67826889, 67827698, strand, 
                 "GCTGTGCAACCTGATAGTGAAGTTGTTCTAGATGCAAAAGATCTTGCATCAAATGTAGACGCTATTGCCCTTAAAGATGGATTAGATCCTCATCTGAATCAAGTTTCTCCAAAGGAAAACACAGTTGGATCTCTCTCTTTCACGGTGACTGATTCTTCATCTGAGATGATTCTCAAAGCTAGAAAGCCTATAACTCGTACAAAAGTCCCATTTGAAAAGGGTTATAGCCAAATGGATTGGCTCAAACTTACTCGAACACATCCCGATCTTGCAGGTAATACTTTGTCTACCCTTTTCTCTATATGCATCTTGATGAAAGGGACAATATTGTTGTGCAGGCCTCAAGGGAGAGTCGAACAGGAGGCTTATATCAATGGACGAAGTTAAGAAACACAAATCAGGAGATTCGATGTGGACTGTTTTGAAAGGACGTGTGTACAACATATCGCCTTATATGAATTTTCACCCCGGAGGTGTTGATATGTTGATGAAAGCCGTTGGGAGAGACGGTACGTTCTTGTTCAACAAGTACCATGCTTGGGTCAATTTTGATGTCTTGCTTGAGAAATGCCTTGTTGGAGTTTTGGATGACTCCAAAGTGATGAGCAAATGCTAAAAGGTTGCGATTATCAAAGATGATTCTTATGTCAAATGTGTTTGCATTTTGATTATTCAAATCAAAACGCTGATCATAACTATGTACTGTGTATTAGACTTTTGATGTCAATCTGAATTATTCATTGATCACACAGTATGTGATTAACACAACACTTTATTTTATAATACAATACAATAGAGGAGCAGAGGAT"),
        ]

        tx = Transcript("STRG.39098.2",
                        chrom,
                        start,
                        end,
                        strand,
                        exon_list)
        for exon in tx.exons:
            self.assertEqual(exon.size, (exon.end-exon.start))    
    
        new_orf = ""
        for cds in tx.cds:
            new_orf += cds.sequence
        
        self.assertEqual(tx.orf.sequence, new_orf)
        
        # C1      StringTie       transcript      3708705 3710956 1000    +       .       gene_id "STRG.556"; transcript_id "STRG.556.2"; cov "199.219254"; FPKM "15.557417"; TPM "22.663902";
        # C1      StringTie       exon    3708705 3709127 1000    +       .       gene_id "STRG.556"; transcript_id "STRG.556.2"; exon_number "1"; cov "309.250031";
        # C1      StringTie       exon    3709272 3709462 1000    +       .       gene_id "STRG.556"; transcript_id "STRG.556.2"; exon_number "2"; cov "257.919434";
        # C1      StringTie       exon    3709534 3709697 1000    +       .       gene_id "STRG.556"; transcript_id "STRG.556.2"; exon_number "3"; cov "166.181290";
        # C1      StringTie       exon    3709773 3709860 1000    +       .       gene_id "STRG.556"; transcript_id "STRG.556.2"; exon_number "4"; cov "87.642693";
        # C1      StringTie       exon    3710739 3710956 1000    +       .       gene_id "STRG.556"; transcript_id "STRG.556.2"; exon_number "5"; cov "4.183486";
        chrom = "C1"
        start = 3708705
        end = 3710956
        strand = "+"
        exon_list:List[Exon] = [
            Exon("exon_1", chrom, 3708704, 3709127, strand,
                 "TCCAGCTCCAGCTAAACTCCAAAAGAGGAGAGAGAGAGAGAGATTCAATCATCTGCAGAGCAGAGAGGTGATAGGCTAATTGGCTCTCCTTTCTCTCTGATTGATCTGGCGATTCGTCTGCCTCGCTCGGTTTCCGCGGGAAACCTTCTTCGTTGACCTTCCCTCTCCCTCTTACGCGTGCGTCGCCCTTTGTTGATTCCGTCATGGCGATTCTGTACGCGCTGGTAGCGCGTGGGACGGTGGTGCTCGCGGAGTTCACCGCGACGTCCACGAACGCGAGCACGATCGCCAAGCAGATCCTGGAGAAGGTCCCTGGGAACAACAACGACAGCAACGTCTCCTACTCTCAGGACCGCTACGTCTTCCACGTTAAACGCACCGATGGCCTCACCGTCCTCTGTATGGCCGAGGAGACCGCCGGCC"),
            Exon("exon_2", chrom, 3709271, 3709462, strand,
                    "GGAGGATTCCGTTTACGTTTCTGGAAGATATTCACCAGAGGTTCGTGAGGACTTACGGTAGAGCAGTTCATACAGCGCAAGCTTATGCCATGAACGACGAGTTCTCTAGAGTTCTTAGTCAGCAGATTGAGTATTACTCTAATGATCCCAACGCCGACAGGATTAATCGGATTAAGGGTGAAATGAGTCAG"),
            Exon("exon_3", chrom, 3709533, 3709697, strand,
                    "GTGCGGGATGTCATGATAGAGAACATTGACAAAGTGCTAGATAGAGGTGAACGCTTGGAGCTACTCGTTGACAAAACCGCCACTATGCAAGGGAATACGTTCCGTTTCAGGAAGCAAGCTCGCCGTTTCAGAAGCACCGTCTGGTGGAGAAATTGCAAGCTCAC"),
            Exon("exon_4", chrom, 3709772, 3709860, strand,
                    "GTTCCTTTTAATACTAGTACTACTGGTGATCATATACATTGCCGTGGCCTTTGTCTGCCACGGACCTCTTCTACCATCTTGCATTTAA"),
            Exon("exon_5", chrom, 3710738, 3710956, strand,
                    "GTGTTTGCTGGATTCGTAATAGCTAACATCTCGGACTTGTTCTCGAAGAAGCTTGGTTTGTGACAGTTGCTTCAAGCTTGTCAATTATTCTTTTTTTTTGTGGTGTTTCTTGAGTGGAAATTGTATCCTAGATTCATGGTTTGAGTGCAAAGTTCATAAAGAAAAGAATGTGATTTACCATTACCAACGTTTTCGATTCACACGTGAAAATAGATAAT"),
        ]
        tx = Transcript("STRG.556.2",
                        chrom,
                        start,
                        end,
                        strand,
                        exon_list)        
        for exon in tx.exons:
            self.assertEqual(exon.size, (exon.end-exon.start))    
    
        new_orf = ""
        for cds in tx.cds:
            new_orf += cds.sequence
        
        self.assertEqual(tx.orf.sequence, new_orf)
        

    def test_gff3_loader(self):
        gff = "tests/data/test.gff3"
        ref = "tests/data/test.fa"

        fasta_dict = read_fasta(ref)

        gene_dict = gff3_loader(gff, fasta_dict)
        # get one of dict 
        # gene_names = gene_dict.keys()
        # test class type
        self.assertIsInstance(gene_dict, dict)

        gene = gene_dict['AT1G01040']

        # test class type
        self.assertIsInstance(gene, Gene)


        

if __name__ == '__main__':
    unittest.main()
